module traceability

one sig null {}

pred isNull[u:univ] {
  u=null
}

pred isNotNull[u:univ] {
  u!=null
}

pred TruePred[] {}

sig List {}

sig Node {}

program goLast[thiz: List, 
               head: List->one(Node+null),
               next: Node->one(Node+null)] 
var [curr: Node+null] 
{
   curr := thiz.head;
   repeat {
      assume isNotNull[curr];
      curr := curr.next
   };
   assume isNull[curr]
}

assertCorrectness assertGoLast[thiz: List,
                               head: List->one(Node+null),
                               next: Node->one(Node+null)] {
  pre = { isNotNull[thiz] }
  program = { call goLast[thiz,head,next] }
  post = { isNull[thiz] } 
}

check assertGoLast
