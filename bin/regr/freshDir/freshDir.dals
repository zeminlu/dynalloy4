module CS
sig Addr { }
fact { some Addr }

pred TruePred [] {}
pred FalsePred [] { not TruePred[] } 

sig Data { }
fact { some Data }

sig Memory { 
  map: Addr -> lone Data 
}

sig MainMemory extends Memory { }

sig Cache extends Memory { 
  dirty: set Addr 
}

sig System { 
  cache: Cache, 
  main: MainMemory 
}

pred SysWritePost[s0, s1:System] {
  some a: Addr, d: Data | {
     s1.cache.dirty = s0.cache.dirty + a 
     s1.cache.map = s0.cache.map ++ (a -> d) 
     s1.main.map = s0.main.map 
  }
}

pred SysFlushPost[s0,s1:System] {
  some x: /*set*/ s0.cache.dirty | {
     s1.cache.dirty = s0.cache.dirty - x 
     s1.cache.map = s0.cache.map 
     s1.main.map = s0.main.map ++ (x->s0.cache.map[x])
  }
}

act SysWrite [s: System] {
  pre { TruePred[] }
  post { SysWritePost[s,s'] }
}

act SysFlush [s: System] {
  pre { TruePred[] }
  post { SysFlushPost[s,s'] }
}

pred FreshDir [s: System] {
  some a: Addr |
    all d: Data | {
    ((a -> d) !in s.main.map) && 
    ((a -> d) !in s.cache.map) 
  }
}

pred Init [s: System] {
  no s.cache.dirty 
  no s.cache.map 
  no s.main.map 
}

// Title: (non) Trace-based analysis for the cache system presented before
// Source: Section 5.2 (Specifying and proving properties of executions: Motivation)

//

// Assertions
assertCorrectness FreshDirAssertion[s:System] {
    pre = { Init[s] }
    program = { (SysWrite[s]+SysFlush[s])* }
    post = { FreshDir[s'] }
}



// Commands
--unroll equals to n
--check FreshDirAssertion for 3 but exactly n Addr, 2*(n+1) Memory, n+1 System

check FreshDirAssertion for 3 but exactly 3 Addr, 8 Memory, 4 System --492ms
check FreshDirAssertion for 3 but exactly 4 Addr, 10 Memory, 5 System --1400ms
check FreshDirAssertion for 3 but exactly 5 Addr, 12 Memory, 6 System --47268ms
check FreshDirAssertion for 3 but exactly 6 Addr, 14 Memory, 7 System --154173ms
check FreshDirAssertion for 3 but exactly 7 Addr, 16 Memory, 8 System --22075ms


