module new_grammar

one sig null {}

abstract sig A {}
one sig A1 extends A {}
one sig A2 extends A {}
one sig A3 extends A {}


pred TruePred[] {}

pred equ[l,r:univ] {
  l=r
}

program old_expr[a:A+null] {
  a := A1;
  a := null;
  a := A2;
  a := A3;
  a := \pre[a];
  assume equ[\pre[a],null];
  skip
}

assertCorrectness old_expr_assert[b: A+null] { 
  pre = { equ[b,null] } 
  program = { call old_expr[b] } 
  post = { equ[b',A] } 
}

check old_expr_assert

