module pepe

pred TruePred[] {}

program test_01[] {
  skip
}
run test_01

program test_02[] {
 (((skip))) 
}
run test_02

program test_03[] {
  skip;skip
}
run test_03

program test_04[] {
  skip+skip
}
run test_04

program test_05[] {
  skip;skip+skip;skip
}
run test_05

program test_06[] {
  skip;(skip+skip);skip
}
run test_06

/* test_07 */ 
pred equ[l,r:univ] {l=r}

action updateVariable[l: univ, r: univ] {
  pre { TruePred[] }
  post { equ[l',r] }
}

program test_07[i:Int] { 
  updateVariable[i,7] 
}

run test_07

/* test_08 */
action postAction[x:univ] {
  pre {TruePred[] }
  post {TruePred[] }
}

program test_08[x:univ] {
  postAction[x]
}

run test_08

/* test_09 */
action skipOtherAction[x:univ] {
  pre { TruePred[] }
  post { TruePred[] }
}
program test_08[x:univ] {
  skipOtherAction[x]
}

run test_08

/* test_09 */
action myAction[x:univ] {
  pre { TruePred[] }
  post { TruePred[] }
}
program test_09[x:univ] {
  myAction[x]
}

run test_09

/*test_10*/
action myAction2[x:univ] {
  pre { TruePred[] }
  post { TruePred[] }
}

program test_10[] {
  myAction[x];skip;myAction2[x]
}

run test_10

program test_11[] {
  skip*
}

run test_11

/* test_12 */
sig T {}
sig S {} 
pred myPre[a,b:univ]{}
pred myPost[a,b,c,d: univ] {}

abstract sig boolean {}
one sig true extends boolean {}
one sig false extends boolean {}

action myAction1[x:T,y:T,d:boolean] {
  pre { TruePred[] }
  post { TruePred[] }
}

assertCorrectness test_12[ a:T, b:T, c:S]{
  pre     = { myPre[a, b] } 
  program = { myAction1[a, b, true] }
  post    = { myPost[a, b, a', b'] }
}


check test_12

action test_13 [a:T, b:T, c:S]{
  pre { myPre[a, b] }
  post { myPost[a, b, a', b'] }
}

run test_13

/* test_14 */
pred myEmptyPred[] {}

program test_14[] {
  [myEmptyPred[]]?
}

run test_14

/* test_15 */
pred myEmptyPred2[] {}
program test_15[] {
  [myEmptyPred[]]?;[myEmptyPred2[]]?
}

run test_15

pred myPre1[x,y:univ]{}
pred myPred[x,y,z:univ]{}

assertCorrectness test_16[a:T, b:T, c:S]{
    pre = { myPre1[a, b] }
    program = { [myPred[a, b, true]]? }
    post = { myPost[a, b, a', b'] }
}

check test_16

/* test_17 */
sig A {}

/* test_18 */
sig Q {}
sig W {}
sig Y { f: Q, r: W }

/* test_19 */
sig Z { f: Q, r: W } { some Z }

program test_20 [a:T, b:T, c:S]{
    myAction1[a, b, true]   
}

run test_20

sig R {}

program test_21 [a:T, b:T, c:S]
var [ local1:R, local2:Q ] 
{
    myAction1[a, b, true]   
}

run test_21

program test_22[a: univ,b: univ]
var [ temp: univ ]
{
  updateVariable[temp,a];
  updateVariable[a,b];
  updateVariable[b,temp]
}
run test_22