module new_grammar

one sig null {}
one sig A {}

pred TruePred[] {}

pred equ[l,r:univ] {
  l=r
}

program ifExpr[a:A+null, f:A->one(A+null)] {
  assume equ[a,null] ;
  a := equ[a,null] => A else null;
  assume equ[a,A]
}

assertCorrectness ifExprAssert[b: A+null, f:A->one(A+null)] { 
  pre = { TruePred[] } 
  program = { call ifExpr[b,f] } 
  post = { equ[b',null] } 
}

check ifExprAssert


