module test

one sig null {} 

abstract sig java_lang_Throwable {}
{}

abstract sig java_lang_Object {}
{}

abstract sig java_util_Map extends java_lang_Object {}
{}

sig ar_edu_dynjml4alloy_builtin_TreeMapTest extends java_lang_Object {}
{}

sig java_lang_String extends java_lang_Object {}
{}

sig java_util_TreeMap extends java_util_Map {}
{}


-- functions

fun fun_map_get[
  map: univ -> univ, 
  k: univ
]: univ { 
  (some k.map) => k.map else null 
} 

fun fun_map_put[
  map: univ->univ, 
  k: univ, 
  v: univ
]: univ-> univ { 
  map ++ (k->v) 
}

--- predicates

pred TruePred[] {}

pred updateMapPost[
  f1:univ->univ->univ,
  f0:univ->univ->univ,
  map:univ, 
  entries:univ->univ
]{ 
  f1 = f0 ++ (map->entries) 
} 

pred equ[l,r:univ] { l=r }

-- actions 

action updateMap[
  Map_entries:java_util_Map->univ->univ,
  map:java_util_Map,entries: univ->univ
]{ 
  pre{TruePred[]} 
  post{updateMapPost[Map_entries',Map_entries,map,entries]} 
}

-- programs

program java_util_Map_put_0[
  thiz:java_util_Map,
  throw:java_lang_Throwable+null,
  return:java_lang_Object,
  k:java_lang_Object+null,
  v:java_lang_Object+null,
  myMap:(ar_edu_dynjml4alloy_builtin_TreeMapTest)->one(java_util_TreeMap+null),
  Map_entries:(java_util_Map)->(univ->lone(univ))
]{
   throw:=null;
   return:=fun_map_get[thiz.Map_entries,k];
   updateMap[Map_entries,thiz,fun_map_put[thiz.Map_entries,k,v]]
}


program mi_program[
  thiz:ar_edu_dynjml4alloy_builtin_TreeMapTest,
  throw:java_lang_Throwable+null,
  myMap:(ar_edu_dynjml4alloy_builtin_TreeMapTest)->one(java_util_TreeMap+null),
  Map_entries:(java_util_Map)->(univ->lone(univ))
] var [
  es_var__78:java_lang_String+null,
  es_var__79:java_lang_Object+null,
  es_var__77:java_lang_String+null
]{

  call java_util_Map_put_0[
              thiz.myMap,
              throw,
              es_var__79,
              es_var__77,
              es_var__78,
              myMap,
              Map_entries]


}

assertCorrectness mi_assert[
  thiz:ar_edu_dynjml4alloy_builtin_TreeMapTest,
  throw:java_lang_Throwable+null,
  myMap:(ar_edu_dynjml4alloy_builtin_TreeMapTest)->one(java_util_TreeMap+null),
  Map_entries:(java_util_Map)->(univ->lone(univ))
]{
  pre { TruePred[] }
  program { call mi_program[thiz,throw,myMap,Map_entries] } 
  post { equ[thiz,null] }
}


check mi_assert
