module viz1

one sig null {}
one sig A {}

pred TruePred[] {}

pred equ[l,r:univ] {
  l=r
}

action clear[b:A+null] {
  pre {TruePred[]}
  post {equ[b',null]}
}

action fill[b:A+null] {
  pre {TruePred[]}
  post {equ[b',A]}
}

action doNothing[y:Int] {
   pre { equ[y,y] }
   post { TruePred[] }
}

program ClearFillClear[c: A+null] {
  clear[c];
  fill[c];
  clear[c] 
}


assertCorrectness assertClearFill[b: A+null, w: Int, h: A+null] { 
  pre     = { TruePred[] } 
  program = { 
              clear[b];
              fill[b];
              doNothing[w];
              clear[b];
              clear[b];
              fill[b];
              doNothing[w];
              doNothing[w];
              clear[b];
              call ClearFillClear[b];
              doNothing[w];
              doNothing[w];
              clear[b];
              call ClearFillClear[h];
              clear[b]
            } 
  post    = { equ[b,A] } 
}

check assertClearFill


