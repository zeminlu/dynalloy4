module viz2

open util/integer


pred TruePred[] {}

pred equ[l,r:univ] {
  l=r
}

action clear[i:Int] {
  pre {TruePred[]}
  post {equ[i',0]}
}

action inc[i:Int] {
  pre {TruePred[]}
  post {equ[i',add[i,1]]}
}

program plusFour[j: Int]{
  inc[j];
  inc[j];
  inc[j];
  inc[j]
}


assertCorrectness assertClearInc[a: Int,
                                 b: Int] { 
  pre     = { equ[a,3] } 
  program = { 

              assume equ[b,1];
              clear[a];
              inc[a];
              inc[a];
              inc[a];
              call plusFour[b];
              clear[b];
              clear[a];
              inc[a];
              inc[b];
              inc[a]

            } 
  post    = { equ[a',0] } 
}

check assertClearInc


assertCorrectness assertClear[a: Int, b: Int] { 
  pre     = { equ[a,3] } 
  program = { 

              clear[a]

            } 
  post    = { equ[a',b] } 
}

check assertClear

program doubleClear[x: Int] {
   clear[x];
   clear[x]
}

assertCorrectness assertDoubleClear[a: Int, b: Int] { 
  pre     = { equ[a,3] } 
  program = { 

              call doubleClear[a]

            } 
  post    = { equ[a',b] } 
}

check assertDoubleClear

