module removeAll

abstract sig BooleanValue {}
one sig FalseValue extends BooleanValue {}
one sig TrueValue extends BooleanValue {}

sig List {}
sig Node {}
sig Char {}
one sig NullValue { }

-- auxiliary preds to represent true and false
pred TruePred[] {}

pred FalsePred[] {
    not TruePred[]
}

-- auxiliary pred. for modelling rel. overriding
pred overrideRelPost[r0,r1:univ->univ,l,r: univ] {
   r1=r0++(l->r)
}

-- invariant for lists: no cycles and no repeated elems
pred privateInvariant[thisV:univ, headV:univ -> one univ, nextV : univ -> one univ, valueV : univ -> one univ] {
   all n: Node |
       n in thisV.headV.(*nextV) implies n !in n.nextV.(*nextV) &&
       all n1, n2: Node |
           (n1+n2 in thisV.headV.(*nextV) and n1.valueV=n2.valueV)
               implies n1=n2
}

pred privInvUno[thisV:univ, headV:univ -> one univ, nextV : univ -> one univ, valueV : univ -> one univ] {
   all n: Node |
           n in thisV.headV.(*nextV) implies n !in n.nextV.(*nextV)
}

pred privInvDos[thisV:univ, headV:univ -> one univ, nextV : univ -> one univ, valueV : univ -> one univ] {
 all n1, n2: Node |
            (n1+n2 in thisV.headV.(*nextV) and n1.valueV=n2.valueV)
                            implies n1=n2
}

-- Init Action
pred postInit[thisValue0: List, head0: List -> one (Node+NullValue), curr1: Node+NullValue, prev1: Node+NullValue] {
   prev1 = NullValue && curr1 = thisValue0.head0
}

act init[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
  pre { TruePred[] }
  post { postInit[v0, v8, v1', v2'] }
}
-- end of Init Action

-- IncCurr Action
pred postIncCurr[curr0: Node+NullValue,next0: Node -> one (Node+NullValue), curr1: Node+NullValue] {
   curr1 = curr0.(next0)
}

act incCurr[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
  pre { TruePred[] }
  post { postIncCurr[v1, v7, v1'] }
}
-- end of IncCurr Action

-- setNext Action
act setNext[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
  pre { TruePred[] }
  post { overrideRelPost[v7,v7', v2, v1.v7] }
}
-- end of setNext Action

-- SetHead Action
pred postSetHead[thisValue0: List, curr0: Node+NullValue,next0: Node -> one (Node+NullValue),head0: List -> one (Node+NullValue), head1: List -> one (Node+NullValue)] {
   head1 = head0 ++ (thisValue0 -> curr0.(next0))
}

act setHead[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
 pre { TruePred[] }
 post { postSetHead[v0, v1, v7, v8, v8'] }
}
-- end of SetHead Action


-- IncPrev Action
pred postIncPrev[curr0: Node+NullValue,prev1: Node+NullValue] {
   prev1 = curr0
}

act incPrev[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
  pre { TruePred[] }
  post { postIncPrev[v1, v2'] }
}
-- end of IncPrev Action

pred BranchUno[v0: List, v8: List -> one (Node+NullValue)] {
 (v0.(v8) != NullValue)
}

-- Action test1
act test1[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchUno[v0, v8] }
post { TruePred[] }
}
-- end of Action test1

pred BranchDos[v1: Node+NullValue] {
   v1 != NullValue
}

-- Action test2
act test2[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchDos[v1] }
post { TruePred[] }
}
-- end of Action test2

pred BranchTres[v1: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char] {
(v1.(v6) in (v3+v4+v5))
}
-- Action test3
act test3[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchTres[v1, v3, v4, v5, v6] }
post { TruePred[] }
}
-- end of Action test3

pred BranchCuatro[v2: Node+NullValue] {
 (v2 != NullValue)
}
-- Action test4
act test4[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchCuatro[v2] }
post { TruePred[] }
}
-- end of Action test4

pred BranchCinco[v2: Node+NullValue] {
 (v2 = NullValue)
}

-- Action test5
act test5[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchCinco[v2] }
post { TruePred[] }
}
-- end of Action test5

pred BranchSeis[v1: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char] {
 (v1.(v6) !in (v3+v4+v5))
}

-- Action test6
act test6[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchSeis[v1, v3, v4, v5, v6] }
post { TruePred[] }
}
-- end of Action test6

pred BranchSiete[v1: Node+NullValue] {
 (v1 = NullValue)
}


-- Action test7
act test7[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchSiete[v1] }
post { TruePred[] }
}
-- end of Action test7


-- Action test8

pred BranchOcho[v0: List, v8: List -> one (Node+NullValue)] {
 v0.v8 = NullValue
}

act test8[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
pre { BranchOcho[v0, v8] }
post { TruePred[] }
}
-- end of Action test8





--
-- RemAllCorrect Assertion
pred removeAllPre[thisV: univ, valueV: univ -> one univ, nextV: univ -> one univ, headV: univ -> one univ] {
   privateInvariant[thisV,headV,nextV,valueV]
}
-- postcondition of the remAll operation: privateInvariant and no iV's in the list
pred removeAllPost[thisV: univ,iVx0, iVy0, iVz0: univ, valueV0: univ -> one univ, nextV0: univ -> one univ, headV0: univ -> one univ, valueV1: univ -> one univ, nextV1: univ -> one univ, headV1: univ -> one univ] {
   privateInvariant[thisV,headV1,nextV1,valueV1] &&
   (thisV.headV1.(*nextV1)).valueV1 = ((thisV.headV0.(*nextV0)).valueV0)-(iVx0+iVy0+iVz0)
}

assert RemAllCorrect {
   assertCorrectness[v0: List, v1: Node+NullValue, v2: Node+NullValue, v3:  Char, v4: Char, v5: Char, v6: Node -> one Char, v7: Node -> one (Node+NullValue), v8: List -> one (Node+NullValue)] {
       pre = { removeAllPre[v0, v6, v7, v8] }
       program = {
 (
  test1[v0,v1,v2,v3,v4,v5,v6,v7,v8];
  init[v0,v1,v2,v3,v4,v5,v6,v7,v8];
  (test2[v0,v1,v2,v3,v4,v5,v6,v7,v8];
   (
 ((test3[v0,v1,v2,v3,v4,v5,v6,v7,v8];(
                              test4[v0,v1,v2,v3,v4,v5,v6,v7,v8];setNext[v0,v1,v2,v3,v4,v5,v6,v7,v8]
                              +
                              test5[v0,v1,v2,v3,v4,v5,v6,v7,v8];setHead[v0,v1,v2,v3,v4,v5,v6,v7,v8]
                              )
 )
  +
 (
  test6[v0,v1,v2,v3,v4,v5,v6,v7,v8];incPrev[v0,v1,v2,v3,v4,v5,v6,v7,v8]
 ));
 incCurr[v0,v1,v2,v3,v4,v5,v6,v7,v8]
)*;
  test7[v0,v1,v2,v3,v4,v5,v6,v7,v8]
 )
  +
 (
  test8[v0,v1,v2,v3,v4,v5,v6,v7,v8];skip
 ))
}
--        post = { removeAllPost[v0, v3, v4, v5, v6, v7, v8, v6', v7', v8'] }
       post = { removeAllPre[v0', v6', v7', v8']  }
}}

check RemAllCorrect for 1 List 5 Node
