//-------------- prelude--------------//
module moduleId 

open util/integer 
open util/sequniv as sequniv 

one sig null {} 

fun fun_reach[h: univ, 
              type: set univ, 
              field: univ -> univ
]: set univ { 
  h.*(field & type->(type+null)) & type 
}

abstract sig boolean {} 
one sig true extends boolean {} 
one sig false extends boolean {} 

abstract sig char {} 

pred TruePred[] {} 
pred FalsePred[] { not TruePred[] } 
pred equ[l,r:univ] {l=r} 
pred neq[l,r:univ] {l!=r} 

fun shl[l,r: Int]: Int { l << r } 
fun sshr[l,r: Int]: Int { l >> r } 
fun ushr[l,r: Int]: Int { l >>> r } 

fun fun_univ_equals[
  l:univ, 
  r: univ 
]: boolean { 
  (equ[l,r]) => true else false 
} 

fun fun_set_add[
  l: set univ,
  e: univ
]: set univ { 
  l+e 
} 

fun fun_set_remove[
  l: set univ,
  e: univ
]: set univ {
  l-e
}
fun fun_set_contains[
  l: set univ,
  e: univ
]: boolean {
  (e in l) => true else false 
} 
pred isSubset[
  l: set univ,
  r: set univ
] {
  (l in r) 
} 
pred isNotSubset[
  l: set univ,
  r: set univ
] {
  (l !in r) 
} 
fun fun_set_size[s: set univ]: Int { #s } 

fun fun_not_empty_set[s: set univ]: boolean { (#s = 0) => false else true } 

pred pred_empty_set[l: set univ] { (no l) } 

pred pred_set_some[l: set univ] { some l } 

pred pred_set_one[l: set univ] { one l } 

pred pred_set_lone[l: set univ] { lone l } 

pred pred_Object_subset[
  s: set univ
] {
  s in Object+null
}

fun fun_set_intersection[
  l: set univ,
  r: set univ
]: set univ {
  l & r 
} 
fun fun_set_difference[
  l: set univ,
  r: set univ
]: set univ {
  l - r 
} 
fun fun_set_sum[
  s: set Int
]: Int {
  sum s 
} 
pred pred_empty_list[l: seq univ] { (no l) } 

fun fun_list_add[
  l: seq univ,
  e: univ
]: seq univ {
  sequniv/add[l,e] 
} 

fun fun_list_get[
  l: seq univ, 
  index: Int
]: univ { 
  index.l 
} 

fun fun_list_contains[
  l: seq univ, 
  e: univ
]: boolean { 
  (e in Int.l) => true else false 
} 

fun fun_list_remove[
  l: seq univ, 
  index: Int
]: seq univ { 
  sequniv/delete[l,index] 
} 

fun fun_list_size[s: seq univ]: Int { #s } 

fun fun_list_equals[
  s1:seq univ, 
  s2: seq univ
]: boolean { 
  (s1=s2) => true else false 
} 

fun fun_list_empty[s: seq univ]: boolean { (#s = 0) => true else false } 

pred pred_empty_map[map: univ -> univ] { (no map) } 

fun fun_map_put[
  map: univ->univ, 
  k: univ, 
  v: univ
]: univ-> univ { 
  map ++ (k->v) 
}

fun fun_map_contains_key[
  map: univ -> univ, 
  k: univ
]: boolean { 
  (some k.map) => true else false 
}

fun fun_map_remove[
  map: univ -> univ, 
  k: univ
]: univ->univ {
  map - (k->univ) 
} 

fun fun_map_get[
  map: univ -> univ, 
  k: univ
]: univ { 
  (some k.map) => k.map else null 
} 

fun fun_map_is_empty[
  map: univ -> univ, 
]: boolean { 
  (some map) => false else true 
}

fun fun_map_clear[
  mapEntries1: univ -> univ -> univ, 
  map: univ
]: univ -> univ -> univ { 
  mapEntries1 - (map -> univ -> univ)
}

fun fun_map_size[
  map: univ -> univ, 
]: univ {
  #map 
} 

pred isEmptyOrNull[u: univ] { u in null } 
fun fun_closure[
  rel: univ -> univ 
]: univ -> univ {
  ^rel 
} 

fun fun_reflexive_closure[
  rel: univ -> univ 
]: univ -> univ {
  *rel 
} 

fun fun_transpose[
  rel: univ -> univ 
]: univ -> univ {
  ~rel 
} 

pred liftExpression[
  expr: univ 
] {
  expr=true 
} 

fun rel_override[
  r:univ->univ,
  k:univ, 
  v:univ
]: univ->univ { 
  r - (k->univ) + (k->v) 
} 

pred updateFieldPost[
  f1:univ->univ,
  f0:univ->univ,
  l:univ,
  r:univ
]{ 
  (r=none) => f1=f0-(l->univ) else f1 = f0 ++ (l->r) 
} 

pred havocVarPost[u:univ]{} 
pred havocVariable2Post[u:univ->univ]{}
action havocVariable2[u:univ->univ]{
 pre{TruePred[]}
 post{havocVariable2Post[u']}
}

pred havocVariable3Post[u:univ->(seq univ)]{}
action havocVariable3[u:univ->(seq univ)]{
 pre{TruePred[]}
 post{havocVariable3Post[u']}
}

pred havocFieldPost[f0,f1: univ->univ, u:univ]{ 
  u<:f0 = u<:f1 
  some u.f1  
} 

pred havocArrayContentsPost[array:  univ,
                            domain: set univ,
                            Object_Array_0: univ -> (seq univ),
                            Object_Array_1: univ -> (seq univ)
                           ] {
  Object_Array_1 - (array->(domain->univ)) = Object_Array_0 - (array->(domain->univ))
  (array.Object_Array_1).univ = (array.Object_Array_0).univ
}action havocArrayContents[
                          array: univ,
                          domain: set univ,
                          Object_Array: univ -> (seq univ)
                         ] {
pre { TruePred[] }
post { havocArrayContentsPost[
                              array,
                              domain,
                              Object_Array,
                              Object_Array'
                             ]
     }
}
pred havocFieldContentsPost[target: univ, 
                            field_0: univ -> univ, 
                            field_1: univ -> univ] { 
  field_1 - (target->univ) = field_0 - (target->univ) 
}

action havocFieldContents[target: univ, 
                          field: univ->univ] {
  pre  { TruePred[] }
  post { havocFieldContentsPost[target,field,field'] }
}

pred pred_in[n: univ, t: set univ] { n in t } 

pred instanceOf[n: univ, t: set univ] { n in t } 

pred isCasteableTo[n: univ, t: set univ] { (n in t) or (n = null) } 

pred getUnusedObjectPost[
  usedObjects1:set Object, 
  usedObjects0:set Object,
  n1: Object+null
]{ 
  n1 !in usedObjects0 
  usedObjects1 = usedObjects0 + (n1)
} 

action updateField[
  l:univ,
  f:univ->univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   updateFieldPost[f',
                  f,
                  l,
                  r]
}
}

action getUnusedObject[
  n:Object+null,
  usedObjects:set Object
]{
pre {
   TruePred[]
}
post {
   getUnusedObjectPost[usedObjects',
                      usedObjects,
                      n']
}
}

action havocField[
  f:univ->univ,
  u:univ
]{
pre {
   TruePred[]
}
post {
   havocFieldPost[f,
                 f',
                 u]
}
}

action updateVariable[
  l:univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   equ[l',
      r]
}
}

action havocVariable[
  v:univ
]{
pre {
   TruePred[]
}
post {
   havocVarPost[v']
}
}


//-------------- java_lang_RuntimeException--------------//
abstract sig RuntimeException extends Exception {}
{}



one sig RuntimeExceptionLit extends RuntimeException {}
{}


//-------------- java_lang_Exception--------------//
sig Exception extends Throwable {}
{}



one sig ExceptionLit extends Exception {}
{}


//-------------- java_lang_Throwable--------------//
abstract sig Throwable extends Object {}
{}





//-------------- java_lang_Object--------------//
abstract sig Object {}
{}





//-------------- java_lang_IndexOutOfBoundException--------------//
abstract sig IndexOutOfBoundsException extends RuntimeException {}
{}



one sig IndexOutOfBoundsExceptionLit extends IndexOutOfBoundsException {}
{}


//-------------- amelia_jfsl_clist_CacheList--------------//
sig CacheList extends Object {}
{}




pred CacheListCondition12[
  node1:univ
]{
   isEmptyOrNull[node1]

}

pred CacheListCondition13[
  node1:univ
]{
   not (
     isEmptyOrNull[node1])

}

pred CacheListCondition30[
  nullDerefBool:univ,
  throw:univ
]{
   equ[nullDerefBool,
      true]
   and 
   equ[throw,
      null]

}

pred CacheListCondition10[
  listHeader:univ->univ,
  thiz:univ
]{
   isEmptyOrNull[thiz.listHeader]
   and 
   isEmptyOrNull[thiz]

}

pred CacheListCondition18[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   lt[index,
     div[thiz.listSize,2]]

}

pred CacheListCondition11[
  listHeader:univ->univ,
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz.listHeader]
     and 
     isEmptyOrNull[thiz]
   )

}

pred precondition_CacheList_remove_0[
  DEFAULT_CACHE_SIZE:univ->univ,
  cacheHeader:univ->univ,
  cacheSize:univ->univ,
  index:univ,
  listHeader:univ->univ,
  listNext:univ->univ,
  listPrevious:univ->univ,
  listSize:univ->univ,
  maximumCacheSize:univ->univ,
  myseq:univ->(seq univ),
  nodeValue:univ->univ,
  thiz:univ,
  throw:univ
]{
   CacheList_object_invariant[DEFAULT_CACHE_SIZE,
                             cacheHeader,
                             cacheSize,
                             listHeader,
                             listNext,
                             listPrevious,
                             listSize,
                             maximumCacheSize,
                             nodeValue,
                             thiz]
   and 
   CacheList_requires[index,
                     listSize,
                     thiz]
   and 
   equ[throw,
      null]
   and 
   CacheList_myseq_abstraction[listHeader,
                              listNext,
                              myseq,
                              thiz]

}

pred CacheListCondition19[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   not (
     lt[index,
       div[thiz.listSize,2]]
   )

}

pred CacheListCondition31[
  nullDerefBool:univ,
  throw:univ
]{
   not (
     equ[nullDerefBool,
        true]
     and 
     equ[throw,
        null]
   )

}

pred CacheListCondition17[
  currentIndex:univ,
  index:univ
]{
   not (
     gt[currentIndex,
       index]
   )

}

pred CacheListCondition15[
  currentIndex:univ,
  index:univ
]{
   not (
     lt[currentIndex,
       index]
   )

}

pred CacheListCondition16[
  currentIndex:univ,
  index:univ
]{
   gt[currentIndex,
     index]

}

pred CacheListCondition14[
  currentIndex:univ,
  index:univ
]{
   lt[currentIndex,
     index]

}

pred CacheListCondition6[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   equ[false,
      false]
   and 
   equ[index,
      thiz.listSize]

}

pred CacheListCondition7[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   not (
     equ[false,
        false]
     and 
     equ[index,
        thiz.listSize]
   )

}

pred CacheListCondition3[
  index:univ
]{
   not (
     lt[index,
       0]
   )

}

pred CacheListCondition20[
  node:univ
]{
   isEmptyOrNull[node]

}

pred CacheListCondition2[
  index:univ
]{
   lt[index,
     0]

}

pred CacheListCondition21[
  node:univ
]{
   not (
     isEmptyOrNull[node])

}

pred CacheList_object_invariant[
  DEFAULT_CACHE_SIZE:univ->univ,
  cacheHeader:univ->univ,
  cacheSize:univ->univ,
  listHeader:univ->univ,
  listNext:univ->univ,
  listPrevious:univ->univ,
  listSize:univ->univ,
  maximumCacheSize:univ->univ,
  nodeValue:univ->univ,
  thiz:univ
]{
   lte[thiz.cacheSize,
      thiz.maximumCacheSize]
   and 
   neq[thiz.listHeader,
      null]
   and 
   (
     all n:CacheListNode | {
       isSubset[n,
               fun_set_difference[(thiz.listHeader).(fun_reflexive_closure[listNext]),null]]
       implies 
               (
                 neq[n,
                    null]
                 and 
                 neq[n.listPrevious,
                    null]
                 and 
                 equ[(n.listPrevious).listNext,
                    n]
                 and 
                 neq[n.listNext,
                    null]
                 and 
                 equ[(n.listNext).listPrevious,
                    n]
               )
     
     }
   )
   and 
   equ[thiz.cacheSize,
      #(fun_set_difference[(thiz.cacheHeader).(fun_reflexive_closure[listNext]),null])]
   and 
   (
     all m:CacheListNode | {
       isSubset[m,
               fun_set_difference[(thiz.cacheHeader).(fun_reflexive_closure[listNext]),null]]
       implies 
               (
                 isNotSubset[m,
                            fun_set_difference[(m.listNext).(fun_reflexive_closure[listNext]),null]]
                 and 
                 equ[m.listPrevious,
                    null]
                 and 
                 equ[m.nodeValue,
                    null]
               )
     
     }
   )
   and 
   neq[(thiz.listHeader).listPrevious,
      null]
   and 
   equ[thiz.DEFAULT_CACHE_SIZE,
      20]
   and 
   gte[thiz.listSize,
      0]
   and 
   equ[thiz.listSize,
      sub[#(fun_set_difference[(thiz.listHeader).(fun_reflexive_closure[listNext]),null]),1]]
   and 
   neq[(thiz.listHeader).listNext,
      null]

}

pred CacheListCondition0[
  throw:univ
]{
   equ[throw,
      null]

}

pred CacheListCondition9[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   not (
     gt[index,
       thiz.listSize]
   )

}

pred CacheListCondition1[
  throw:univ
]{
   not (
     equ[throw,
        null]
   )

}

pred CacheListCondition8[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   gt[index,
     thiz.listSize]

}

pred CacheListCondition24[
  listNext:univ->univ,
  node:univ
]{
   isEmptyOrNull[node.listNext]
   and 
   isEmptyOrNull[node]
   and 
   isEmptyOrNull[node]

}

pred CacheListCondition22[
  listPrevious:univ->univ,
  node:univ
]{
   isEmptyOrNull[node.listPrevious]
   and 
   isEmptyOrNull[node]
   and 
   isEmptyOrNull[node]

}

pred CacheListCondition27[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz]
     and 
     isEmptyOrNull[thiz]
   )

}

pred CacheListCondition23[
  listPrevious:univ->univ,
  node:univ
]{
   not (
     isEmptyOrNull[node.listPrevious]
     and 
     isEmptyOrNull[node]
     and 
     isEmptyOrNull[node]
   )

}

pred CacheListCondition26[
  thiz:univ
]{
   isEmptyOrNull[thiz]
   and 
   isEmptyOrNull[thiz]

}

pred CacheList_ensures[
  index:univ,
  index':univ,
  listSize:univ->univ,
  myseq:univ->(seq univ),
  myseq':univ->(seq univ),
  thiz:univ,
  throw':univ
]{
   (
     (
       gte[index,
          0]
       and 
       lt[index,
         thiz.listSize]
     )
     implies 
             (
               equ[#(thiz.myseq'),
                  sub[#(thiz.myseq),1]]
               and 
               (
                 all i:Int | {
                   (
                     lte[0,
                        i]
                     and 
                     lt[i,
                       #(thiz.myseq')]
                   )
                   implies 
                           (
                             (
                               lt[i,
                                 index']
                               implies 
                                       equ[i.(thiz.myseq'),
                                          i.(thiz.myseq)]
                             )
                             and 
                             (
                               gte[i,
                                  index']
                               implies 
                                       equ[i.(thiz.myseq'),
                                          (add[i,1]).(thiz.myseq)]
                             )
                           )
                 
                 }
               )
               and 
               equ[throw',
                  null]
             )
   )
   and 
   (
     (
       lt[index,
         0]
       or 
       gte[index,
          thiz.listSize]
     )
     implies 
             isSubset[throw',
                     IndexOutOfBoundsException ]
   )

}

pred CacheListCondition25[
  listNext:univ->univ,
  node:univ
]{
   not (
     isEmptyOrNull[node.listNext]
     and 
     isEmptyOrNull[node]
     and 
     isEmptyOrNull[node]
   )

}

pred CacheListCondition5[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz])

}

pred CacheList_requires[
  index:univ,
  listSize:univ->univ,
  thiz:univ
]{
   (
     gte[index,
        0]
     and 
     lt[index,
       thiz.listSize]
   )
   or 
   lt[index,
     0]
   or 
   gte[index,
      thiz.listSize]

}

pred postcondition_CacheList_remove_0[
  DEFAULT_CACHE_SIZE':univ->univ,
  cacheHeader':univ->univ,
  cacheSize':univ->univ,
  index:univ,
  index':univ,
  listHeader':univ->univ,
  listNext':univ->univ,
  listPrevious':univ->univ,
  listSize:univ->univ,
  listSize':univ->univ,
  maximumCacheSize':univ->univ,
  myseq:univ->(seq univ),
  myseq':univ->(seq univ),
  nodeValue':univ->univ,
  thiz:univ,
  thiz':univ,
  throw':univ
]{
   CacheList_ensures[index,
                    index',
                    listSize,
                    myseq,
                    myseq',
                    thiz,
                    throw']
   and 
   CacheList_object_invariant[DEFAULT_CACHE_SIZE',
                             cacheHeader',
                             cacheSize',
                             listHeader',
                             listNext',
                             listPrevious',
                             listSize',
                             maximumCacheSize',
                             nodeValue',
                             thiz']

}

pred CacheListCondition32[
  listHeader:univ->univ,
  listNext:univ->univ,
  myseq:univ->(seq univ),
  thiz:univ
]{
   CacheList_myseq_abstraction[listHeader,
                              listNext,
                              myseq,
                              thiz]

}

pred CacheListCondition4[
  thiz:univ
]{
   isEmptyOrNull[thiz]

}

pred CacheList_myseq_abstraction[
  listHeader:univ->univ,
  listNext:univ->univ,
  myseq:univ->(seq univ),
  thiz:univ
]{
   equ[#(thiz.myseq),
      #(fun_set_difference[fun_set_difference[(thiz.listHeader).(fun_reflexive_closure[listNext]),thiz.listHeader],null])]
   and 
   (
     neq[(thiz.listHeader).listNext,
        null]
     implies 
             (
               equ[(0).(thiz.myseq),
                  (thiz.listHeader).listNext]
               and 
               (
                 all j:Int | {
                   (
                     lte[0,
                        j]
                     and 
                     lt[j,
                       sub[#(thiz.myseq),1]]
                   )
                   implies 
                           equ[(add[j,1]).(thiz.myseq),
                              (j.(thiz.myseq)).listNext]
                 
                 }
               )
             )
   )

}

pred CacheListCondition28[
  cacheSize:univ->univ,
  maximumCacheSize:univ->univ,
  thiz:univ
]{
   lt[thiz.cacheSize,
     thiz.maximumCacheSize]

}

pred CacheListCondition29[
  cacheSize:univ->univ,
  maximumCacheSize:univ->univ,
  thiz:univ
]{
   not (
     lt[thiz.cacheSize,
       thiz.maximumCacheSize]
   )

}

program CacheList_remove_0[
  thiz:CacheList,
  throw:Throwable+null,
  return:Object+null,
  index:Int,
  listPrevious:(CacheListNode)->one(CacheListNode+null),
  DEFAULT_CACHE_SIZE:(CacheList)->one(Int),
  listHeader:(CacheList)->one(CacheListNode+null),
  listNext:(CacheListNode)->one(CacheListNode+null),
  maximumCacheSize:(CacheList)->one(Int),
  nodeValue:(CacheListNode)->one(Data+null),
  listSize:(CacheList)->one(Int),
  myseq:(CacheList)->(seq(CacheListNode)),
  modCount:(CacheList)->one(Int),
  cacheSize:(CacheList)->one(Int),
  cacheHeader:(CacheList)->one(CacheListNode+null),
  usedObjects:set (Object)
] var [
  nextCachedNode:CacheListNode+null,
  currentIndex:Int,
  node:CacheListNode+null,
  node1:CacheListNode+null,
  exception:IndexOutOfBoundsException+null,
  nullDerefBool:boolean,
  oldValue:Object+null
]{
   skip;
   if CacheListCondition0[throw]  {
      nullDerefBool:=false
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      throw:=null
   
   } else {
      skip
   
   }
   ;
   skip;
   skip;
   if CacheListCondition0[throw]  {
      exception:=null
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition2[index]  {
      if CacheListCondition0[throw]  {
         exception:=IndexOutOfBoundsExceptionLit
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         throw:=exception
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition4[thiz]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition6[index,listSize,thiz]  {
      if CacheListCondition0[throw]  {
         exception:=IndexOutOfBoundsExceptionLit
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         throw:=exception
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition4[thiz]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition8[index,listSize,thiz]  {
      if CacheListCondition0[throw]  {
         exception:=IndexOutOfBoundsExceptionLit
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         throw:=exception
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   skip;
   if CacheListCondition4[thiz]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition18[index,listSize,thiz]  {
      if CacheListCondition10[listHeader,thiz]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         node1:=(thiz.listHeader).listNext
      
      } else {
         skip
      
      }
      ;
      skip;
      if CacheListCondition0[throw]  {
         currentIndex:=0
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition14[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listNext
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=add[currentIndex,1]
	
	} else {
	   skip
	
	}
 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}

 
} else {
	skip
}
         ;
         assume CacheListCondition15[currentIndex,index]
      
      } else {
         skip
      
      }
   
   } else {
      if CacheListCondition4[thiz]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         node1:=thiz.listHeader
      
      } else {
         skip
      
      }
      ;
      skip;
      if CacheListCondition4[thiz]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         currentIndex:=thiz.listSize
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition16[currentIndex,index] {
	if CacheListCondition12[node1]  {
	   if CacheListCondition0[throw]  {
		  nullDerefBool:=true
	   
	   } else {
		  skip
	   
	   }
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   node1:=node1.listPrevious
	
	} else {
	   skip
	
	}
	;
	if CacheListCondition0[throw]  {
	   currentIndex:=sub[currentIndex,1]
	
	} else {
	   skip
	
	}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
} else {
	skip
}
         ;
         assume CacheListCondition17[currentIndex,index]
      
      } else {
         skip
      
      }
   
   }
   ;
   if CacheListCondition0[throw]  {
      node:=node1
   
   } else {
      skip
   
   }
   ;
   skip;
   if CacheListCondition20[node]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      oldValue:=node.nodeValue
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition22[listPrevious,node]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      listNext:=(listNext)++((node.listPrevious)->(node.listNext))
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition24[listNext,node]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      listPrevious:=(listPrevious)++((node.listNext)->(node.listPrevious))
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition26[thiz]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      listSize:=(listSize)++((thiz)->(sub[thiz.listSize,1]))
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition26[thiz]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      modCount:=(modCount)++((thiz)->(add[thiz.modCount,1]))
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition26[thiz]  {
      if CacheListCondition0[throw]  {
         nullDerefBool:=true
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition28[cacheSize,maximumCacheSize,thiz]  {
      skip;
      if CacheListCondition4[thiz]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         nextCachedNode:=thiz.cacheHeader
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition20[node]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         listPrevious:=(listPrevious)++((node)->(null))
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition20[node]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         listNext:=(listNext)++((node)->(nextCachedNode))
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition20[node]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         nodeValue:=(nodeValue)++((node)->(null))
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition4[thiz]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         cacheHeader:=(cacheHeader)++((thiz)->(node))
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition26[thiz]  {
         if CacheListCondition0[throw]  {
            nullDerefBool:=true
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if CacheListCondition0[throw]  {
         cacheSize:=(cacheSize)++((thiz)->(add[thiz.cacheSize,1]))
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition0[throw]  {
      return:=oldValue
   
   } else {
      skip
   
   }
   ;
   if CacheListCondition30[nullDerefBool,throw]  {
      if CacheListCondition0[throw]  {
         throw:=NullPointerExceptionLit
      
      } else {
         skip
      
      }
   
   } else {
      skip
   
   }

}

assertCorrectness check_CacheList_remove_0[
  DEFAULT_CACHE_SIZE:(CacheList)->one(Int),
  cacheHeader:(CacheList)->one(CacheListNode+null),
  cacheSize:(CacheList)->one(Int),
  currentIndex:Int,
  exception:IndexOutOfBoundsException+null,
  index:Int,
  listHeader:(CacheList)->one(CacheListNode+null),
  listNext:(CacheListNode)->one(CacheListNode+null),
  listPrevious:(CacheListNode)->one(CacheListNode+null),
  listSize:(CacheList)->one(Int),
  maximumCacheSize:(CacheList)->one(Int),
  modCount:(CacheList)->one(Int),
  myseq:(CacheList)->(seq(CacheListNode)),
  nextCachedNode:CacheListNode+null,
  node:CacheListNode+null,
  node1:CacheListNode+null,
  nodeValue:(CacheListNode)->one(Data+null),
  nullDerefBool:boolean,
  oldValue:Object+null,
  return:Object+null,
  thiz:CacheList,
  throw:Throwable+null,
  usedObjects:set (Object)
]{
pre={
   precondition_CacheList_remove_0[DEFAULT_CACHE_SIZE,
                                  cacheHeader,
                                  cacheSize,
                                  index,
                                  listHeader,
                                  listNext,
                                  listPrevious,
                                  listSize,
                                  maximumCacheSize,
                                  myseq,
                                  nodeValue,
                                  thiz,
                                  throw]

}
program={
   call CacheList_remove_0[thiz,throw,return,index,listPrevious,DEFAULT_CACHE_SIZE,listHeader,listNext,maximumCacheSize,nodeValue,listSize,myseq,modCount,cacheSize,cacheHeader,usedObjects];
   havocVariable3[myseq];
   assume CacheListCondition32[listHeader,listNext,myseq,thiz]

}
post={
   postcondition_CacheList_remove_0[DEFAULT_CACHE_SIZE',
                                   cacheHeader',
                                   cacheSize',
                                   index,
                                   index',
                                   listHeader',
                                   listNext',
                                   listPrevious',
                                   listSize,
                                   listSize',
                                   maximumCacheSize',
                                   myseq,
                                   myseq',
                                   nodeValue',
                                   thiz,
                                   thiz',
                                   throw']

}
}


//-------------- java_lang_NullPointerException--------------//
abstract sig NullPointerException extends RuntimeException {}
{}



one sig NullPointerExceptionLit extends NullPointerException {}
{}


//-------------- amelia_jfsl_clist_CacheListNode--------------//
sig CacheListNode extends Object {}
{}





//-------------- amelia_jfsl_clist_Data--------------//
sig Data extends Object {}
{}





