// $ANTLR : "expandeddynalloy.g" -> "DynalloyLexer.java"$

package ar.uba.dc.rfm.dynalloy.parser;

import java.util.ArrayList;
import ar.uba.dc.rfm.alloy.VariableId;
import ar.uba.dc.rfm.dynalloy.ast.*;	
import ar.uba.dc.rfm.dynalloy.ast.programs.*;
import ar.uba.dc.rfm.dynalloy.parser.splitter.Position;
import ar.uba.dc.rfm.alloy.ast.expressions.*;
import ar.uba.dc.rfm.alloy.parser.*;
import ar.uba.dc.rfm.alloy.AlloyTyping;
import ar.uba.dc.rfm.alloy.AlloyVariable;
import ar.uba.dc.rfm.alloy.AlloyCheckCommand;
import ar.uba.dc.rfm.alloy.ast.formulas.AlloyFormula;
import ar.uba.dc.rfm.alloy.ast.formulas.PredicateFormula;
import ar.uba.dc.rfm.dynalloy.TestPredicateLabel;
import java.io.StringReader;
import java.util.Collections;

import java.util.List;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.Set;		

public interface DynAlloyANTLRParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int COMMA = 4;
	int COLON = 5;
	int IDENT = 6;
	int LPAREN = 7;
	int RPAREN = 8;
	int RARROW = 9;
	int PLUS = 10;
	int LITERAL_lone = 11;
	int LITERAL_one = 12;
	int LITERAL_some = 13;
	int LITERAL_seq = 14;
	int LITERAL_set = 15;
	int SLASH = 16;
	int LBRACKET = 17;
	int RBRACKET = 18;
	int DOT = 19;
	int PLUSPLUS = 20;
	int AMP = 21;
	int NUMBER = 22;
	int BACKSLASH_PRE = 23;
	int IF_EXPR = 24;
	int ELSE = 25;
	int VAL = 26;
	int SEMICOLON = 27;
	int EQUALS = 28;
	int STAR = 29;
	int MINUS = 30;
	int LBRACE = 31;
	int RBRACE = 32;
	int COMMENT = 33;
	int COMMENT_SLASH_SLASH = 34;
	int COMMENT_ML = 35;
	int WS = 36;
	int MODULE_ID = 37;
	int LITERAL_abstract = 38;
	int LITERAL_sig = 39;
	int LITERAL_extends = 40;
	int LITERAL_in = 41;
	int LITERAL_module = 42;
	int LITERAL_open = 43;
	int LITERAL_as = 44;
	int LITERAL_exactly = 45;
	int LITERAL_action = 46;
	int LITERAL_act = 47;
	int LITERAL_pre = 48;
	int LITERAL_post = 49;
	int LITERAL_program = 50;
	int LITERAL_prog = 51;
	int LITERAL_var = 52;
	int LITERAL_assertCorrectness = 53;
	int LITERAL_lblneg = 54;
	int LITERAL_lblpos = 55;
	int QUESTION = 56;
	int LITERAL_call = 57;
	int ASSIGNMENT = 58;
	int LITERAL_assume = 59;
	int LITERAL_while = 60;
	int LITERAL_do = 61;
	int LITERAL_repeat = 62;
	int LITERAL_if = 63;
	int LITERAL_skip = 64;
}
